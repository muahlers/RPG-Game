{"version":3,"sources":["../../src/models/userModel.js"],"names":["Schema","mongoose","UserSchema","email","type","String","required","unique","password","username","resetToken","resetTokenExp","Date","pre","next","bcrypt","hash","methods","isValidPassword","user","compare","UserModel","model"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;IACQA,M,GAAWC,oB,CAAXD,M,EAER;;AACA,IAAME,UAAU,GAAG,IAAIF,MAAJ,CAAW;AAC5BG,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE,IAFL;AAGLC,IAAAA,MAAM,EAAE;AAHH,GADqB;AAM5BC,EAAAA,QAAQ,EAAE;AACRJ,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE;AAFF,GANkB;AAU5BG,EAAAA,QAAQ,EAAE;AACRL,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE;AAFF,GAVkB;AAc5BI,EAAAA,UAAU,EAAE;AACVN,IAAAA,IAAI,EAAEC;AADI,GAdgB;AAiB5BM,EAAAA,aAAa,EAAE;AACbP,IAAAA,IAAI,EAAEQ;AADO;AAjBa,CAAX,CAAnB,C,CAsBA;;AACAV,UAAU,CAACW,GAAX,CAAe,MAAf;AAAA,2FAAuB,iBAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFC,mBAAOC,IAAP,CAAY,KAAKR,QAAjB,EAA2B,EAA3B,CADE;;AAAA;AACfQ,YAAAA,IADe;AAErB,iBAAKR,QAAL,GAAgBQ,IAAhB;AACAF,YAAAA,IAAI;;AAHiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA,K,CAMA;;AAEAZ,UAAU,CAACe,OAAX,CAAmBC,eAAnB;AAAA,4FAAqC,kBAAgBV,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BW,YAAAA,IAD6B,GACtB,IADsB;AAAA;AAAA,mBAEbJ,mBAAOK,OAAP,CAAeZ,QAAf,EAAyBW,IAAI,CAACX,QAA9B,CAFa;;AAAA;AAE7BY,YAAAA,OAF6B;AAAA,8CAG5BA,OAH4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AAMA,IAAMC,SAAS,GAAGpB,qBAASqB,KAAT,CAAe,MAAf,EAAuBpB,UAAvB,CAAlB;;eAEemB,S","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\n\n// Extraigo la clase Schema de mongoose\nconst { Schema } = mongoose;\n\n// Creo un esquema para User\nconst UserSchema = new Schema({\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  password: {\n    type: String,\n    required: true,\n  },\n  username: {\n    type: String,\n    required: true,\n  },\n  resetToken: {\n    type: String,\n  },\n  resetTokenExp: {\n    type: Date,\n  },\n});\n\n// Encrypt Password\nUserSchema.pre('save', async function (next) {\n  const hash = await bcrypt.hash(this.password, 10);\n  this.password = hash;\n  next();\n});\n\n// Compare Encrypt passwordRoutes\n\nUserSchema.methods.isValidPassword = async function (password) {\n  const user = this;\n  const compare = await bcrypt.compare(password, user.password);\n  return compare;\n};\n\nconst UserModel = mongoose.model('user', UserSchema);\n\nexport default UserModel;\n"],"file":"userModel.js"}