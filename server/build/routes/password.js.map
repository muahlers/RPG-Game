{"version":3,"sources":["../../src/routes/password.js"],"names":["email","process","env","EMAIL_ACCOUNT","password","EMAIL_PASSWORD","stmpTransport","nodemailer","createTransport","service","EMAIL_PROVAIDER","auth","user","pass","handlebarsOptions","viewEngine","extName","defaultLayout","partialsDEMAIL_PROVAIDERir","layoutsDir","viewPath","path","resolve","use","router","express","Router","post","request","response","done","userEmail","body","UserModel","findOne","status","json","message","buffer","crypto","randomBytes","token","toString","findByIdAndUpdate","_id","resetToken","resetTokenExp","Date","now","emailOptions","to","from","template","subject","context","name","url","PORT","sendMail","$gt","verifiedPassword","undefined","username"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAEA;AACA,IAAMA,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYC,aAA1B;AACA,IAAMC,QAAQ,GAAGH,OAAO,CAACC,GAAR,CAAYG,cAA7B;;AAEA,IAAMC,aAAa,GAAGC,uBAAWC,eAAX,CAA2B;AAC/CC,EAAAA,OAAO,EAAER,OAAO,CAACC,GAAR,CAAYQ,eAD0B;AAE/CC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAEZ,KADF;AAEJa,IAAAA,IAAI,EAAET;AAFF;AAFyC,CAA3B,CAAtB;;AAQA,IAAMU,iBAAiB,GAAG;AACxBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,OAAO,EAAE,MADC;AAEVC,IAAAA,aAAa,EAAE,IAFL;AAGVC,IAAAA,0BAA0B,EAAE,cAHlB;AAIVC,IAAAA,UAAU,EAAE;AAJF,GADY;AAOxBC,EAAAA,QAAQ,EAAEC,iBAAKC,OAAL,CAAa,cAAb,CAPc;AAQxBN,EAAAA,OAAO,EAAE;AARe,CAA1B;AAWAV,aAAa,CAACiB,GAAd,CAAkB,SAAlB,EAA6B,6CAAIT,iBAAJ,CAA7B,E,CAEA;;AACA,IAAMU,MAAM,GAAGC,oBAAQC,MAAR,EAAf,C,CAEA;;;AACAF,MAAM,CAACG,IAAP,CAAY,kBAAZ;AAAA,2FAAgC,iBAAOC,OAAP,EAAgBC,QAAhB,EAA0BC,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBC,YAAAA,SADwB,GACZH,OAAO,CAACI,IAAR,CAAahC,KADD;AAAA;AAAA,mBAEXiC,sBAAUC,OAAV,CAAkB;AAAElC,cAAAA,KAAK,EAAE+B;AAAT,aAAlB,CAFW;;AAAA;AAExBnB,YAAAA,IAFwB;;AAI9B,gBAAI,CAACA,IAAL,EAAW;AACTiB,cAAAA,QAAQ,CAACM,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,gBAAAA,OAAO,EAAE,eAAX;AAA4BF,gBAAAA,MAAM,EAAE;AAApC,eAA1B;AACD,aAN6B,CAQ9B;;;AACMG,YAAAA,MATwB,GASfC,mBAAOC,WAAP,CAAmB,EAAnB,CATe;AAUxBC,YAAAA,KAVwB,GAUhBH,MAAM,CAACI,QAAP,CAAgB,KAAhB,CAVgB;AAAA;AAAA,mBAYxBT,sBAAUU,iBAAV,CACJ;AAAEC,cAAAA,GAAG,EAAEhC,IAAI,CAACgC;AAAZ,aADI,EAEJ;AACEC,cAAAA,UAAU,EAAEJ,KADd;AAEEK,cAAAA,aAAa,EAAEC,IAAI,CAACC,GAAL,KAAa;AAF9B,aAFI,CAZwB;;AAAA;AAAA,kBAoB1B,CAACpB,OAAO,CAACI,IAAT,IAAiB,CAACJ,OAAO,CAACI,IAAR,CAAahC,KApBL;AAAA;AAAA;AAAA;;AAqB5B6B,YAAAA,QAAQ,CAACM,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,cAAAA,OAAO,EAAE,cAAX;AAA2BF,cAAAA,MAAM,EAAE;AAAnC,aAA1B;AArB4B;AAAA;;AAAA;AAAA;AAwB1B;AACMc,YAAAA,YAzBoB,GAyBL;AACnBC,cAAAA,EAAE,EAAEnB,SADe;AAEnBoB,cAAAA,IAAI,EAAEnD,KAFa;AAGnBoD,cAAAA,QAAQ,EAAE,iBAHS;AAInBC,cAAAA,OAAO,EAAE,qBAJU;AAKnB;AACAC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,IAAI,EAAE,KADC;AAEPC,gBAAAA,GAAG,6BAAsBvD,OAAO,CAACC,GAAR,CAAYuD,IAAZ,IAAoB,IAA1C,wCAA4EhB,KAA5E;AAFI;AANU,aAzBK;AAAA;AAAA,mBAoCpBnC,aAAa,CAACoD,QAAd,CAAuBT,YAAvB,CApCoB;;AAAA;AAqC1BpB,YAAAA,QAAQ,CAACM,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,cAAAA,OAAO,EAAE,4FAAX;AAAyGF,cAAAA,MAAM,EAAE;AAAjH,aAA1B;AArC0B;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAuCnBL,IAAI,aAvCe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhC;;AAAA;AAAA;AAAA;AAAA,K,CA4CA;;AACAN,MAAM,CAACG,IAAP,CAAY,iBAAZ;AAAA,4FAA+B,kBAAOC,OAAP,EAAgBC,QAAhB,EAA0BC,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7B,gBAAI,CAACF,OAAO,CAACI,IAAT,IAAiB,CAACJ,OAAO,CAACI,IAAR,CAAahC,KAA/B,IAAwC,CAAC4B,OAAO,CAACI,IAAR,CAAa5B,QAA1D,EAAoE;AAClEyB,cAAAA,QAAQ,CAACM,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,gBAAAA,OAAO,EAAE,2BAAX;AAAwCF,gBAAAA,MAAM,EAAE;AAAhD,eAA1B;AACD;;AACKJ,YAAAA,SAJuB,GAIXH,OAAO,CAACI,IAAR,CAAahC,KAJF;AAMvBY,YAAAA,IANuB,GAMhBqB,sBAAUC,OAAV,CAAkB;AAC7BW,cAAAA,UAAU,EAAEjB,OAAO,CAACI,IAAR,CAAaS,KADI;AAE7BK,cAAAA,aAAa,EAAE;AAAEa,gBAAAA,GAAG,EAAEZ,IAAI,CAACC,GAAL;AAAP,eAFc;AAEO;AACpChD,cAAAA,KAAK,EAAE+B;AAHsB,aAAlB,CANgB;;AAY7B,gBAAI,CAACnB,IAAL,EAAW;AACTiB,cAAAA,QAAQ,CAACM,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,gBAAAA,OAAO,EAAE,eAAX;AAA4BF,gBAAAA,MAAM,EAAE;AAApC,eAA1B;AACD;;AAED,gBAAI,CAACP,OAAO,CAACI,IAAR,CAAa5B,QAAd,IAA0B,CAACwB,OAAO,CAACI,IAAR,CAAa4B,gBAAxC,IAA4DhC,OAAO,CAACI,IAAR,CAAa5B,QAAb,KAA0BwB,OAAO,CAACI,IAAR,CAAa4B,gBAAvG,EAAyH;AACvH/B,cAAAA,QAAQ,CAACM,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,gBAAAA,OAAO,EAAE,6BAAX;AAA0CF,gBAAAA,MAAM,EAAE;AAAlD,eAA1B;AACD,aAlB4B,CAoB7B;;;AAEAvB,YAAAA,IAAI,CAACR,QAAL,GAAgBwB,OAAO,CAACI,IAAR,CAAa5B,QAA7B;AACAQ,YAAAA,IAAI,CAACiC,UAAL,GAAkBgB,SAAlB;AACAjD,YAAAA,IAAI,CAACkC,aAAL,GAAqBe,SAArB,CAxB6B,CAyB7B;;AAzB6B;AA4B3B;AACMZ,YAAAA,YA7BqB,GA6BN;AACnBC,cAAAA,EAAE,EAAEnB,SADe;AAEnBoB,cAAAA,IAAI,EAAEnD,KAFa;AAGnBoD,cAAAA,QAAQ,EAAE,gBAHS;AAInBC,cAAAA,OAAO,EAAE,uBAJU;AAKnB;AACAC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,IAAI,EAAE3C,IAAI,CAACkD;AADJ;AANU,aA7BM;AAAA;AAAA,mBAuCrBxD,aAAa,CAACoD,QAAd,CAAuBT,YAAvB,CAvCqB;;AAAA;AAwC3BpB,YAAAA,QAAQ,CAACM,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA0B;AAAEC,cAAAA,OAAO,EAAE,kBAAX;AAA+BF,cAAAA,MAAM,EAAE;AAAvC,aAA1B;AAxC2B;AAAA;;AAAA;AAAA;AAAA;AAAA,8CA0CpBL,IAAI,cA1CgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/B;;AAAA;AAAA;AAAA;AAAA;eA8CeN,M","sourcesContent":["import express from 'express';\nimport nodemailer from 'nodemailer';\nimport hbs from 'nodemailer-express-handlebars';\nimport path from 'path';\nimport crypto from 'crypto';\n\nimport UserModel from '../models/userModel';\n\n// Configuro Email Sender\nconst email = process.env.EMAIL_ACCOUNT;\nconst password = process.env.EMAIL_PASSWORD;\n\nconst stmpTransport = nodemailer.createTransport({\n  service: process.env.EMAIL_PROVAIDER,\n  auth: {\n    user: email,\n    pass: password,\n  },\n});\n\nconst handlebarsOptions = {\n  viewEngine: {\n    extName: '.hbs',\n    defaultLayout: null,\n    partialsDEMAIL_PROVAIDERir: './templates/',\n    layoutsDir: './templates',\n  },\n  viewPath: path.resolve('./templates/'),\n  extName: '.html',\n};\n\nstmpTransport.use('compile', hbs(handlebarsOptions));\n\n// Creo una instancia de express para manejar rutas llamada Router.\nconst router = express.Router();\n\n// End point forget Password\nrouter.post('/forget-password', async (request, response, done) => {\n  const userEmail = request.body.email;\n  const user = await UserModel.findOne({ email: userEmail });\n\n  if (!user) {\n    response.status(400).json({ message: 'invalid email', status: '400' });\n  }\n\n  // Create & Update user reset token\n  const buffer = crypto.randomBytes(20);\n  const token = buffer.toString('hex');\n\n  await UserModel.findByIdAndUpdate(\n    { _id: user._id },\n    {\n      resetToken: token,\n      resetTokenExp: Date.now() + 60000,\n    },\n  );\n\n  if (!request.body || !request.body.email) {\n    response.status(400).json({ message: 'invalid body', status: '400' });\n  } else {\n    try {\n      // Send User a Email to reset password\n      const emailOptions = {\n        to: userEmail,\n        from: email,\n        template: 'forgot-password',\n        subject: 'Game Reset Password',\n        // Aqui pongo las variables que van dentro del email\n        context: {\n          name: 'joe',\n          url: `http://localhost:${process.env.PORT || 3000}/reset-password.html?token=${token}`,\n        },\n      };\n      await stmpTransport.sendMail(emailOptions);\n      response.status(200).json({ message: 'An email has been sent to your email address, Password reset link is only valid for 10 min', status: '200' });\n    } catch (error) {\n      return done(error);\n    }\n  }\n});\n\n// End point reser Password\nrouter.post('/reset-password', async (request, response, done) => {\n  if (!request.body || !request.body.email || !request.body.password) {\n    response.status(400).json({ message: 'invalid email Or Password', status: '400' });\n  }\n  const userEmail = request.body.email;\n\n  const user = UserModel.findOne({\n    resetToken: request.body.token,\n    resetTokenExp: { $gt: Date.now() }, // gt: greater than\n    email: userEmail,\n  });\n\n  if (!user) {\n    response.status(400).json({ message: 'invalid token', status: '400' });\n  }\n\n  if (!request.body.password || !request.body.verifiedPassword || request.body.password !== request.body.verifiedPassword) {\n    response.status(400).json({ message: 'Verified Password Not Match', status: '400' });\n  }\n\n  // update Database\n\n  user.password = request.body.password;\n  user.resetToken = undefined;\n  user.resetTokenExp = undefined;\n  // await user.save();\n\n  try {\n    // Send User a Email telling password updates\n    const emailOptions = {\n      to: userEmail,\n      from: email,\n      template: 'reset-password',\n      subject: 'Game Updated Password',\n      // Aqui pongo las variables que van dentro del email\n      context: {\n        name: user.username,\n      },\n    };\n    await stmpTransport.sendMail(emailOptions);\n    response.status(200).json({ message: 'password updated', status: '200' });\n  } catch (error) {\n    return done(error);\n  }\n});\n\nexport default router;\n"],"file":"password.js"}