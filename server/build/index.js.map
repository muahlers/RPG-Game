{"version":3,"sources":["../src/index.js"],"names":["require","config","uri","process","env","MONGO_CONNECTION_URL","mongoConfig","useNewUrlParser","useUnifiedTopology","useCreateIndex","useFindAndModify","MONGO_USER","MONGO_PASSWORD","auth","authSource","user","pass","mongoose","connect","connection","on","error","console","log","exit","app","server","createServer","io","cors","gameManager","GameManager","setup","port","PORT","use","bodyParser","urlencoded","extended","json","get","passport","authenticate","session","request","response","status","express","__dirname","routes","passwordRoutes","secureRoutes","message","next","listen"],"mappings":"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","sourcesContent":["import express from 'express'; // Requiro Paquetes Express en node_modules\nimport bodyParser from 'body-parser'; // Requiro Paquetes Body Parser en node_modules\nimport cors from 'cors'; // Requiro Paquetes de Cors en node_modules\nimport cookieParser from 'cookie-parser';\nimport mongoose from 'mongoose';\nimport passport from 'passport';\n\n// routes\nimport routes from './routes/main';\nimport passwordRoutes from './routes/password';\nimport secureRoutes from './routes/secure';\nimport GameManager from './gameManager/GameManager';\n\n// Variables en Archivo .env\nrequire('dotenv').config();\n\n// setup mongo connections\nconst uri = process.env.MONGO_CONNECTION_URL;\nconst mongoConfig = {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n  useCreateIndex: true,\n  useFindAndModify: false,\n};\nif (process.env.MONGO_USER && process.env.MONGO_PASSWORD) {\n  mongoConfig.auth = { authSource: 'admin' };\n  mongoConfig.user = process.env.MONGO_USER;\n  mongoConfig.pass = process.env.MONGO_PASSWORD;\n}\n\nmongoose.connect(uri, mongoConfig);\n\n// if there is no connection to db we exit the app!\nmongoose.connection.on('error', (error) => {\n  console.log(error);\n  console.log('Base de Datos no encontrada');\n  process.exit(1);\n});\n\n// setup Express App\nconst app = express(); // Abro una instancia Express y la llamo app!\nconst server = require('http').createServer(app);\nconst io = require('socket.io')(server, {\n  cors: {\n    // origin: process.env.CORS_ORIGIN,\n  },\n});\n\nconst gameManager = new GameManager(io);\ngameManager.setup();\n\n//\nconst port = process.env.PORT || 3000; // Defino un Puerto a Usar por el Server.\n\n// update Express Settings\napp.use(bodyParser.urlencoded({ extended: false })); // parse application/x-www-form-urlencoded.\napp.use(bodyParser.json()); // parse application/json\napp.use(cookieParser());\n\n// Allow requests from other servers.\n\napp.use(cors());\n\n// require  passport autho\nrequire('./auth/auth');\n\n// Game.html no quiero que sea publica sin un Token, la pongo antes de la carpeta public.\napp.get('/game.html', passport.authenticate('jwt', { session: false }), (request, response) => {\n  response.status(200).json(request.user);\n});\n\n// Make folder public be aviable as public content\napp.use(express.static(`${__dirname}/../public`));\n\n// setup routes\napp.use('/', routes);\napp.use('/', passwordRoutes);\napp.use('/', passport.authenticate('jwt', { session: false }), secureRoutes);\n\napp.get('/game.html', passport.authenticate('jwt', { session: false }), (request, response) => {\n  response.status(200).json(request.user);\n});\n\n// Make folder public be aviable as public content\napp.use(express.static(`${__dirname}/../public`));\n\n// setup routes\napp.use('/', routes);\napp.use('/', passwordRoutes);\napp.use('/', passport.authenticate('jwt', { session: false }), secureRoutes);\n\n// Catch all other routes. Use() catch all that wasn't catch by the upper code.\napp.use((request, response) => {\n  response.status(404).json({ message: '404 - Not Found', status: '404' });\n});\n\n// If a Error Pop ups from another End Point this middlewaer catch it!\napp.use((error, request, response, next) => {\n  console.log(error);\n  response.status(error.status || 500).json({ error: error.message, status: '500' });\n});\n\n// server start listening when bd connection is establish.\nmongoose.connection.on('connected', () => {\n  console.log('connected to mongo');\n  server.listen(port, () => {\n    console.log(`Server is Running in Port: ${port}`);\n  });\n});\n"],"file":"index.js"}