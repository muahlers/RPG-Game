{"version":3,"sources":["../../src/gameManager/GameManager.js"],"names":["GameManager","io","spawners","chests","monsters","items","players","playerLocations","chestLocations","monsterLocations","itemsLocations","itemsData","locations","parseMapData","setupEventListener","setupSpawners","levelData","layers","forEach","layer","name","objects","obj","push","x","y","properties","spawner","on","socket","id","emit","frame","console","log","spawnPlayer","broadcast","error","playerData","flipX","playerAttacking","currentDirection","chestId","gold","updateGold","spawnerId","removeObject","itemId","canPickUpItem","addItem","item","monsterId","attack","playerAttackValue","loseHealth","health","updateHealth","playerAttacked","parseInt","respawn","enemyPlayerId","to","message","email","config","spawnInterval","limit","spawnerType","SpawnerType","CHEST","Object","keys","key","Spawner","addChest","bind","deleteChest","MONSTER","addMonster","deleteMonster","moveMonsters","ITEM","deleteItem","chest","monster","playerId","player","PlayerModel"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\nimport PlayerModel from './PlayerModel';\nimport Spawner from './Spawner';\nimport * as levelData from '../../public/assets/level/large_level.json';\nimport * as itemsData from '../../public/assets/level/tools.json';\nimport { SpawnerType } from './utils';\nimport ChatModel from '../models/chatModel';\n\nexport default class GameManager {\n  constructor(io) {\n    // socket logic connection.\n    this.io = io;\n\n    this.spawners = {};\n    this.chests = {};\n    this.monsters = {};\n    this.items = {};\n    this.players = {};\n\n    this.playerLocations = [];\n    this.chestLocations = {};\n    this.monsterLocations = {};\n    this.itemsLocations = itemsData.locations;\n  }\n\n  setup() {\n    this.parseMapData();\n    this.setupEventListener();\n    this.setupSpawners();\n  }\n\n  parseMapData() {\n    this.levelData = levelData;\n    this.levelData.layers.forEach((layer) => {\n      if (layer.name === 'player_locations') {\n        layer.objects.forEach((obj) => {\n          this.playerLocations.push([obj.x, obj.y]);\n        });\n      } else if (layer.name === 'chest_locations') {\n        layer.objects.forEach((obj) => {\n          if (this.chestLocations[obj.properties.spawner]) {\n            this.chestLocations[obj.properties.spawner].push([obj.x, obj.y]);\n          } else {\n            this.chestLocations[obj.properties.spawner] = [[obj.x, obj.y]];\n          }\n        });\n      } else if (layer.name === 'monster_locations') {\n        layer.objects.forEach((obj) => {\n          if (this.monsterLocations[obj.properties.spawner]) {\n            this.monsterLocations[obj.properties.spawner].push([obj.x, obj.y]);\n          } else {\n            this.monsterLocations[obj.properties.spawner] = [[obj.x, obj.y]];\n          }\n        });\n      }\n    });\n  }\n\n  setupEventListener() {\n    // Socket logic.\n    this.io.on('connection', (socket) => {\n      // Player disconnected.\n      socket.on('disconnect', () => {\n        // delete user data from server.\n        delete this.players[socket.id];\n\n        // emit a message to all players to delete this player.\n        this.io.emit('desconectar', socket.id);\n      });\n      // New Player.\n      // socket.on('newPlayer', (token, frame) => {\n      socket.on('newPlayer', (frame) => {\n        try {\n          console.log('Sending Info to new Player: Players, Chests, Monsters');\n          // validate token, if valid send game information, else reject login.\n          // const decoded = jwt.verify(token, process.env.JWT_SECRET);\n\n          // get player's name\n          // const { name } = decoded.user;\n          const name = 'test';\n          // create a new Player\n          console.log(`Player in Server: ${socket.id} frame: ${frame}`);\n          this.spawnPlayer(socket.id, name, frame);\n          console.log('Emitinig Current Players');\n          // send the players objecto to the new player\n          socket.emit('currentPlayers', this.players);\n          console.log('Emitinig Current Monsters');\n          // send the monsters objecto to the new player\n          socket.emit('currentMonsters', this.monsters);\n          console.log('Emitinig Current Chests');\n          // send the chests objecto to the new player\n          socket.emit('currentChests', this.chests);\n          console.log('Emitinig Current Chests');\n          // send the items objecto to the new player\n          socket.emit('currentItems', this.items);\n          console.log('Emitinig Broadcasting to others players');\n          // inform the other players of the new player that joined.\n          socket.broadcast.emit('spawnPlayer', this.players[socket.id], frame);\n        } catch (error) {\n          console.log(error);\n          socket.emit('invalidToken');\n        }\n      });\n      // Players move.\n      socket.on('playerMovement', (playerData) => {\n        if (this.players[socket.id]) {\n          this.players[socket.id].x = playerData.x;\n          this.players[socket.id].y = playerData.y;\n          this.players[socket.id].flipX = playerData.flipX;\n          this.players[socket.id].playerAttacking = playerData.playerAttacking;\n          this.players[socket.id].currentDirection = playerData.currentDirection;\n          // emita a message to all players about the player that move.\n          this.io.emit('playerMoved', this.players[socket.id]);\n        }\n      });\n      // Player Pick up Chest.\n      socket.on('pickUpChest', (chestId) => {\n        if (this.chests[chestId]) {\n          const { gold } = this.chests[chestId];\n\n          // updating the players gold\n          this.players[socket.id].updateGold(gold);\n          socket.emit('updateScore', this.players[socket.id].gold);\n\n          // removing the chest\n          this.spawners[this.chests[chestId].spawnerId].removeObject(chestId);\n        }\n      });\n      //  Player Pick up a Item.\n      socket.on('pickUpItem', (itemId) => {\n        if (this.items[itemId]) {\n          if (this.players[socket.id].canPickUpItem()) {\n            this.players[socket.id].addItem(this.items[itemId]);\n            // Refresh Player Object in Game Scene.\n            socket.emit('updateItems', this.players[socket.id]);\n            // Refresh Player Object in others Players Game Scene.\n            socket.broadcast('updatePlayersItems', socket.id, this.players[socket.id]);\n\n            // removing the item from GameManeger\n            this.spawners[this.item[itemId].spawnerId].removeObject(itemId);\n          }\n        }\n      });\n      // A monster has been attacked, refresh.\n      socket.on('monsterAttacked', (monsterId) => {\n        // update the spawner\n        if (this.monsters[monsterId]) {\n          const { gold, attack } = this.monsters[monsterId];\n          const playerAttackValue = this.players[socket.id].attack;\n\n          // subtract health monster model\n          this.monsters[monsterId].loseHealth(playerAttackValue);\n\n          // check the monsters health, and if dead remove that object\n          if (this.monsters[monsterId].health <= 0) {\n            // updating the players gold\n            this.players[socket.id].updateGold(gold);\n            socket.emit('updateScore', this.players[socket.id].gold);\n\n            // removing the monster\n            this.spawners[this.monsters[monsterId].spawnerId].removeObject(monsterId);\n            this.io.emit('monsterRemoved', monsterId);\n\n            // add bonus health to the player\n            this.players[socket.id].updateHealth(15);\n            this.io.emit('updatePlayerHealth', socket.id, this.players[socket.id].health);\n          } else {\n            // update the players health\n            this.players[socket.id].playerAttacked(attack);\n            this.io.emit('updatePlayerHealth', socket.id, this.players[socket.id].health);\n\n            // update the monsters health\n            this.io.emit('updateMonsterHealth', monsterId, this.monsters[monsterId].health);\n\n            // check the player's health, if below 0 have the player respawn\n            if (this.players[socket.id].health <= 0) {\n              // update the gold the player has\n              this.players[socket.id].updateGold(parseInt(-this.players[socket.id].gold / 2, 10));\n              socket.emit('updateScore', this.players[socket.id].gold);\n\n              // respawn the player\n              this.players[socket.id].respawn(this.players);\n              this.io.emit('respawnPlayer', this.players[socket.id]);\n              console.log('Respawn Death Player:');\n            }\n          }\n        }\n      });\n\n      socket.on('attackedPlayer', (enemyPlayerId) => {\n        if (this.players[enemyPlayerId]) {\n          // get required information\n          const { gold } = this.players[enemyPlayerId];\n          const playerAttackValue = this.players[socket.id].attack;\n\n          // substract health from attacked player\n          this.players[enemyPlayerId].playerAttacked(playerAttackValue);\n\n          // check iff enemy payer is dead, if it's give half gold to other player.\n          if (this.players[enemyPlayerId].health < 1) {\n            // give player half gold\n            this.players[socket.id].updateGold(gold / 2);\n            this.io.emit('updateScore', this.players[socket.id].gold);\n\n            // respawn enemy player.\n            this.players[enemyPlayerId].respawn(this.players);\n            this.io.emit('respawnPlayer', this.players[enemyPlayerId]);\n\n            // reset the attacked player gold\n            this.players[enemyPlayerId].updateGold(-gold / 2);\n            this.io.to(`${enemyPlayerId}`).emit('updateScore', this.players[enemyPlayerId].gold);\n\n            // update player health\n            this.io.emit('updatePlayerHealth', socket.id, this.players[socket.id].health);\n          } else {\n            this.io.emit('updatePlayerHealth', enemyPlayerId, this.players[enemyPlayerId].health);\n          }\n        }\n      });\n\n      // socket.on('sendMessage', (message, token) => {\n      socket.on('sendMessage', async (message) => {\n        try {\n          // validate token, if valid send game information, else reject login.\n          // const decoded = jwt.verify(token, process.env.JWT_SECRET);\n\n          // get player's name\n          // const { name, email } = decoded.user;\n          const name = 'test';\n          const email = 'test@test.com';\n\n          // store data in data base\n          // await ChatModel.create({ email, message });\n\n          // emit message to all players\n          this.io.emit('newMessage', {\n            message,\n            name,\n            frame: this.players[socket.id].frame,\n          });\n        } catch (error) {\n          console.log(error);\n          socket.emit('invalidToken');\n        }\n      });\n      // player connected to our game.\n      console.log('Player connected to our game :)');\n      console.log(`Socket ID: ${socket.id}`);\n    });\n  }\n\n  setupSpawners() {\n    const config = {\n      spawnInterval: 3000,\n      limit: 3,\n      spawnerType: SpawnerType.CHEST,\n      id: '',\n    };\n    let spawner;\n\n    // create chest spawners\n    Object.keys(this.chestLocations).forEach((key) => {\n      config.id = `chest-${key}`;\n      spawner = new Spawner(\n        config,\n        this.chestLocations[key],\n        this.addChest.bind(this),\n        this.deleteChest.bind(this),\n      );\n      this.spawners[spawner.id] = spawner;\n    });\n\n    // create monster spawners\n    Object.keys(this.monsterLocations).forEach((key) => {\n      config.id = `monster-${key}`;\n      config.spawnerType = SpawnerType.MONSTER;\n\n      spawner = new Spawner(\n        config,\n        this.monsterLocations[key],\n        this.addMonster.bind(this),\n        this.deleteMonster.bind(this),\n        this.moveMonsters.bind(this),\n      );\n      this.spawners[spawner.id] = spawner;\n    });\n\n    // create item spawners\n    config.id = 'item-1';\n    config.spawnerType = SpawnerType.ITEM;\n\n    spawner = new Spawner(\n      config,\n      this.itemsLocations,\n      this.addItem.bind(this),\n      this.deleteItem.bind(this),\n    );\n    this.spawners[spawner.id] = spawner;\n  }\n\n  // Funciones para Spawner.\n  addChest(chestId, chest) {\n    console.log('chest Spawned: ', chestId);\n    this.chests[chestId] = chest;\n    this.io.emit('chestSpawned', chest);\n  }\n\n  deleteChest(chestId) {\n    console.log('chest Removed: ', chestId);\n    delete this.chests[chestId];\n    this.io.emit('chestRemoved', chestId);\n  }\n\n  addItem(itemId, item) {\n    console.log('item Spawned: ', itemId);\n    this.items[itemId] = item;\n    this.io.emit('itemSpawned', item);\n  }\n\n  deleteItem(itemId) {\n    console.log('item Removed: ', itemId);\n    delete this.items[itemId];\n    this.io.emit('itemRemoved', itemId);\n  }\n\n  addMonster(monsterId, monster) {\n    console.log('monster Spawned:', monsterId);\n    this.monsters[monsterId] = monster;\n    this.io.emit('monsterSpawned', monster);\n  }\n\n  deleteMonster(monsterId) {\n    console.log('monster Removed :', monsterId);\n    delete this.monsters[monsterId];\n    this.io.emit('monsterRemoved', monsterId);\n  }\n\n  moveMonsters() {\n    this.io.emit('monsterMovement', this.monsters);\n  }\n\n  spawnPlayer(playerId, name, frame) {\n    const player = new PlayerModel(this.playerLocations, playerId, this.players, name, frame);\n    this.players[playerId] = player;\n    console.log(`New Player Spawned: ${playerId}`);\n    console.log(player);\n  }\n}\n"],"file":"GameManager.js"}